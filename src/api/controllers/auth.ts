/* eslint-disable max-lines */

import { ApiBearerAuth, ApiBody, ApiOperation, ApiResponse } from "@nestjs/swagger"
import { AuthManager, JwtManager, UserRepo } from "@src/application/auth/interfaces"
import { AuthPayload, AuthToken, UserPayload } from "@src/application/auth/dto"
import { BadRequestException, Body, Controller, Get, Post } from "@nestjs/common"
import { GenereatePayload, GenereatePayloadHandler } from "@src/application/auth/commands/generate-payload"
import {
    AuthManager as ParamAuthManager,
    AuthUserRepo as ParamAuthUserRepo,
    JwtManager as ParamJwtManager,
    UnitOfWork as ParamUnitOfWork,
    UserPayloadFromAuthToken,
} from "@src/api/param_decorators"
import { Proof, VerifyProof, VerifyProofHandler } from "@src/application/auth/commands/verify-proof"
import { TonAddress, TonNetwork } from "@src/domain/user/types"

import { UnitOfWork } from "@src/application/common/interfaces"

@Controller("auth")
export class AuthController {
    /**
     * Get auth payload for TON proof signature
     * @returns Auth payload
     */
    @ApiOperation({ summary: "Get auth payload for TON proof signature" })
    @ApiResponse({
        status: 200,
        description: "Auth payload",
        schema: {
            nullable: false,
            type: "object",
            properties: {
                nonce: {
                    nullable: false,
                    title: "Nonce",
                    type: "string",
                    description: "Payload nonce",
                },
            },
        },
    })
    @Get("payload")
    getAuthPayload(
        @ParamAuthManager() authManager: AuthManager,
    ): AuthPayload {
        const payloadHandler = new GenereatePayloadHandler(authManager)
        const payload = payloadHandler.execute(new GenereatePayload())

        return payload
    }

    /**
     * Get user payload by an auth token
     * @returns User payload
     */
    @ApiOperation({ summary: "Get user payload by an auth token" })
    @ApiBearerAuth()
    @ApiResponse({
        status: 200,
        description: "User payload",
        schema: {
            nullable: false,
            type: "object",
            properties: {
                id: {
                    nullable: false,
                    title: "Id",
                    type: "string",
                    format: "uuid",
                    description: "User id",
                },
                address: {
                    nullable: false,
                    title: "Address",
                    type: "string",
                    description: "User address",
                },
            },
        },
    })
    @ApiResponse({
        status: 401,
        description: (
            "Unauthorized | " +
            "JWT token is expired | " +
            "Invalid JWT token | " +
            "Unknown JWT token error"
        ),
    })
    @Get()
    getUserPayload(
        @UserPayloadFromAuthToken() userPayload: UserPayload,
    ): UserPayload {
        return userPayload
    }

    /**
     * Get auth token by user address and generated payload, signed TON proof signature and user address
     * @param payloadNonce - Payload nonce, generated by /auth/payload
     * @param address - User address
     * @param network - Blockchain network. Must be -3 or -239
     * @param signature - TON proof signature
     * @returns Auth token
     */
    @ApiOperation({
        summary: "Get auth token by user address and generated payload, signed TON proof signature and user address",
    })
    @ApiBody({
        schema: {
            type: "object",
            properties: {
                payloadNonce: {
                    nullable: false,
                    title: "Payload nonce",
                    type: "string",
                    description: "Payload nonce, generated by /auth/payload",
                },
                address: {
                    nullable: false,
                    title: "Address",
                    type: "string",
                    description: "User address",
                },
                network: {
                    nullable: false,
                    title: "Network",
                    examples: ["-3", "-239"],
                    type: "string",
                    description: "Blockchain network. Must be -3 or -239",
                    enum: ["-3", "-239"],
                },
                signature: {
                    nullable: false,
                    title: "Signature",
                    type: "string",
                    description: "TON proof signature",
                },
            },
            required: ["payloadNonce", "address", "network", "signature"],
        },
    })
    @ApiResponse({
        status: 201,
        description: "Auth token",
        schema: {
            nullable: false,
            type: "object",
            properties: {
                token: {
                    nullable: false,
                    title: "Token",
                    type: "string",
                },
            },
        },
    })
    @ApiResponse({
        status: 400,
        description: (
            "Address is required | " +
            "Network is required and must be -3 or -239 | " +
            "Signature is required | " +
            "Payload nonce is required"
        ),
    })
    @ApiResponse({
        status: 401,
        description: (
            "Nonce is expired | " +
            "Invalid nonce | " +
            "Uknown nonce error | " +
            "Invalid proof signature | " +
            "Invalid proof signature"
        ),
    })
    @Post()
    authUser(
        @ParamAuthUserRepo() userRepo: UserRepo,
        @ParamAuthManager() authManager: AuthManager,
        @ParamJwtManager() jwtManager: JwtManager,
        @ParamUnitOfWork() uow: UnitOfWork,
        @Body("payloadNonce") payloadNonce?: string,
        @Body("address") address?: TonAddress,
        @Body("network") network?: TonNetwork,
        @Body("signature") signature?: string,
    ): Promise<AuthToken> {
        if (!address) {
            throw new BadRequestException("Address is required")
        } else if (!network || (network !== TonNetwork.Mainnet && network !== TonNetwork.Testnet)) {
            throw new BadRequestException("Network is required and must be -3 or -239")
        } else if (!signature) {
            throw new BadRequestException("Signature is required")
        } else if (!payloadNonce) {
            throw new BadRequestException("Payload nonce is required")
        }

        const payload = new AuthPayload(payloadNonce)

        const proof = new Proof(signature, payload.nonce)
        const tokenHandler = new VerifyProofHandler(authManager, jwtManager, userRepo, uow)
        const token = tokenHandler.execute(new VerifyProof(address, network, proof))

        return token
    }
}
