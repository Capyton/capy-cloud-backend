version: "3.9"

services:
  api:
    image: capy-cloud-backend.api:latest
    container_name: capy-cloud-backend.api
    restart: "on-failure"
    env_file:
      - ".env"
    build:
      context: .
    expose:
      - "5000"
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      storage-daemon:
        condition: service_started
    networks:
      - capy-cloud-backend.postgres.network
    volumes:
      - capy-cloud-backend.api.data:/usr/src/app/${UPLOAD_DIR}:rw
      - capy-cloud-backend.storage-daemon.data:/usr/src/app/global_configs:rw

  postgres:
    container_name: capy-cloud-backend.postgres
    image: "postgres:15-alpine"
    hostname: capy-cloud-backend.postgres
    restart: unless-stopped
    expose:
      - "5432"
    ports:
      - "127.0.0.1:15432:5432"
    networks:
      - capy-cloud-backend.postgres.network
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: ${POSTGRES_USER:-$USER}
      POSTGRES_DB: ${POSTGRES_DB:-${POSTGRES_USER:-$USER}}
    volumes:
      - capy-cloud-backend.postgres.data:/var/lib/postgresql/users:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  storage-daemon:
    image: "meamone/ton-storage-daemon:latest"
    container_name: capy-cloud-backend.storage-daemon
    restart: "unless-stopped"
    build:
      context: .
      dockerfile: storage-daemon/Dockerfile
    environment:
      TON_STORAGE_ADNL_PORT: ${TON_STORAGE_ADNL_PORT:-3333}
      TON_STORAGE_CONTROL_PORT: ${TON_STORAGE_CONTROL_PORT:-5555}
      TON_STORAGE_VERBOSITY_LEVEL: ${TON_STORAGE_VERBOSITY_LEVEL:-3}
      TON_STORAGE_GLOBAL_CONFIG: ${TON_STORAGE_GLOBAL_CONFIG:?}
      TON_STORAGE_DATABASE_NAME: ${TON_STORAGE_DATABASE_NAME:-ton-storage}
      TON_PUBLIC_IP: ${TON_PUBLIC_IP:?}
    volumes:
      - ./global_configs:/usr/src/app/global_configs:ro
      - capy-cloud-backend.storage-daemon.data:/data:rw

volumes:
  capy-cloud-backend.api.data: {}
  capy-cloud-backend.postgres.data: {}
  capy-cloud-backend.storage-daemon.data: {}

networks:
  capy-cloud-backend.postgres.network: {}
